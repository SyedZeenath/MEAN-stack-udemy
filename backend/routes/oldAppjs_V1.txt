const { ConstantPool } = require('@angular/compiler');
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');

const Post = require('./models/post');

const app = express();

//connect to mongoose, get the string and password from the mongodb cluster connect, and change the db name here(node-angular) if needed, to create new db on the go
mongoose.connect('mongodb+srv://Zee:fTtM2pxavagKGKs2@cluster0.u3ju9.mongodb.net/node-angular?retryWrites=true&w=majority')
.then(() => {
  console.log('connected to database');
}).catch(() => {
  console.log('connection failed!!');
});

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: false}));  //parse urlencoded data, generally not used

// app.use((req, res, next) => {
//   console.log("first middleware");
//   next();  //Goes to the next execution; else will end up as timeout
// });

// app.use((req, res, next) => {
//   res.send('Hello from express'); //since it is last, instead of timeout, we send back some response using 'res'
// });

app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE, OPTIONS');
  next();
});

app.post('/api/posts', (req, res, next) => {
  //const post = req.body;
  const post = new Post({   //using the model
    title: req.body.title,
    content: req.body.content
  });
  // console.log(post);
  post.save()  //since it is schema, the collection name would automatically will be plural form of model name(Post) from post.js -> Posts
  .then(createdPost => {
    res.status(201).json({
      message: 'Posts added successfully',
      postId: createdPost._id
    });
  });

});
//can use put/patch
//put: to completely replace a resource
//patch to update the existing with values
app.put('/api/posts/:id',(req, res, next) => {
  const post = new Post({
    _id: req.body.id,   //since we cannot post without id
    title: req.body.title,
    content: req.body.content
  })
  Post.updateOne({_id: req.params.id}, post).then(result => {
    console.log(result);
    res.status(200).json({message: 'Update successful',})
  })
})
app.get('/api/posts', (req, res, next) => {   //use -> get here to be more precise
  // raw form of getting the posts
  // const posts = [
  //   {
  //     id: '01',
  //   title: 'First server-side post',
  //   content: 'This is coming from server'
  // },
  // {
  //   id: '02',
  //   title: 'Second server-side post',
  //   content: 'This is coming from server!'
  // }
  // ];

  //using mongodb
  Post.find()    //then works like a promise, then holds our results
  .then(documents => {
    console.log(documents)
    res.status(200).json({
      message: 'Posts fetched successfully',
      posts: documents
    });
  });

});

app.get("/api/posts/:id", (req, res, next) => [
  Post.findById(req.params.id).then(post => {
    if(post) {
      res.status(200).json(post);
    }else{
      res.status(404).json({ message: 'Post not found'})
    }
  })
])
// api/posts/someid will be fetched by express
app.delete("/api/posts/:id", (req, res, next) => {
  //console.log(req.params.id);
  Post.deleteOne({_id: req.params.id})
  .then(result => {
    console.log(result);
    res.status(200).json({
      message: 'Posts deleted successfully'
    });
  })
});
module.exports = app;   //this works as export class
